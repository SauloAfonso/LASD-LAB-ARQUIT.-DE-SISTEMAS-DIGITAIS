
Exerc6_SaraAndrade.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000712  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c1  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000386  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  000017b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  9e:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

int8_t dezena, unid, count;
uint8_t LUT[10] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B};

ISR(INT0_vect) // Interrupção externa 0, Incrementa
{	
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
	if(count < 95)
  be:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count>
  c2:	8f 35       	cpi	r24, 0x5F	; 95
  c4:	74 f4       	brge	.+28     	; 0xe2 <__vector_1+0x3c>
	{
		count += 5;
  c6:	8b 5f       	subi	r24, 0xFB	; 251
  c8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count>
		OCR0A  = (count*256)/100;
  cc:	08 2e       	mov	r0, r24
  ce:	00 0c       	add	r0, r0
  d0:	99 0b       	sbc	r25, r25
  d2:	98 2f       	mov	r25, r24
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	64 e6       	ldi	r22, 0x64	; 100
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__divmodhi4>
  de:	67 bd       	out	0x27, r22	; 39
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <__vector_1+0x4a>
	}
	else if(count == 95)
  e2:	8f 35       	cpi	r24, 0x5F	; 95
  e4:	29 f4       	brne	.+10     	; 0xf0 <__vector_1+0x4a>
	{
		count +=4;
  e6:	83 e6       	ldi	r24, 0x63	; 99
  e8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count>
		OCR0A = (count*256)/100;
  ec:	8d ef       	ldi	r24, 0xFD	; 253
  ee:	87 bd       	out	0x27, r24	; 39
	}
}
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_2>:

ISR(INT1_vect) // Interrupção externa 1, Decrementa
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
	if(count > 0 && count != 99)
 120:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count>
 124:	18 16       	cp	r1, r24
 126:	84 f4       	brge	.+32     	; 0x148 <__vector_2+0x40>
 128:	83 36       	cpi	r24, 0x63	; 99
 12a:	81 f0       	breq	.+32     	; 0x14c <__vector_2+0x44>
	{
		count -= 5;
 12c:	85 50       	subi	r24, 0x05	; 5
 12e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count>
		OCR0A = (count*256)/100;
 132:	08 2e       	mov	r0, r24
 134:	00 0c       	add	r0, r0
 136:	99 0b       	sbc	r25, r25
 138:	98 2f       	mov	r25, r24
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	64 e6       	ldi	r22, 0x64	; 100
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__divmodhi4>
 144:	67 bd       	out	0x27, r22	; 39
 146:	07 c0       	rjmp	.+14     	; 0x156 <__vector_2+0x4e>
	}
	else if(count == 99)
 148:	83 36       	cpi	r24, 0x63	; 99
 14a:	29 f4       	brne	.+10     	; 0x156 <__vector_2+0x4e>
	{
		count -=4;
 14c:	8f e5       	ldi	r24, 0x5F	; 95
 14e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <count>
		OCR0A = (count*256)/100;
 152:	83 ef       	ldi	r24, 0xF3	; 243
 154:	87 bd       	out	0x27, r24	; 39
	}
}
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <main>:

int main(void)
{
	DDRD =	0b11110011; // Todos os pinos da porta D como saídas, exceto os pinos PD2 e PD3
 16e:	83 ef       	ldi	r24, 0xF3	; 243
 170:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00001100; // Habilita pull-ups dos pinos PD2 e PD3
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	8b b9       	out	0x0b, r24	; 11
	
	DDRC =	0xFF; // Habilita Todos os pinos da porta C como saída
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	87 b9       	out	0x07, r24	; 7
	DDRB =	0xFF; // Habilita Todos os pinos da porta B como saída
 17a:	84 b9       	out	0x04, r24	; 4
	
	// Configuração das interrupções
	EICRA = 0b00001010;// Interrupções externas INT0 e INT1 na borda de descida
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000011;// Habilita as interrupções externas INT0 e INT1
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	8d bb       	out	0x1d, r24	; 29
	sei();// Habilita interrupções globais, ativando o bit I do SREG
 186:	78 94       	sei
	
	// Fast PWM, TOP = 0xFF, OC0A habilitado
	TCCR0A = 0b10000011; // PWM não invertido no pino OC0A
 188:	83 e8       	ldi	r24, 0x83	; 131
 18a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101; // Liga TC0, prescaler = 1024, fpwm = f0sc/(256*prescaler) = 16MHz/(256*1024) = 61Hz
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0; // Controle do ciclo ativo do PWM 0C0A
 190:	17 bc       	out	0x27, r1	; 39

	count = 0;
 192:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <count>
	
	while (1)
	{
		dezena = count / 10;
 196:	37 e6       	ldi	r19, 0x67	; 103
 198:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <count>
 19c:	83 02       	muls	r24, r19
 19e:	e1 2d       	mov	r30, r1
 1a0:	11 24       	eor	r1, r1
 1a2:	e5 95       	asr	r30
 1a4:	e5 95       	asr	r30
 1a6:	87 fd       	sbrc	r24, 7
 1a8:	e3 95       	inc	r30
 1aa:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end>
		unid = count % 10;
 1ae:	2e 2f       	mov	r18, r30
 1b0:	22 0f       	add	r18, r18
 1b2:	92 2f       	mov	r25, r18
 1b4:	99 0f       	add	r25, r25
 1b6:	99 0f       	add	r25, r25
 1b8:	92 0f       	add	r25, r18
 1ba:	89 1b       	sub	r24, r25
 1bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <unid>
		
		PORTC = LUT[dezena];
 1c0:	0e 2e       	mov	r0, r30
 1c2:	00 0c       	add	r0, r0
 1c4:	ff 0b       	sbc	r31, r31
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	88 b9       	out	0x08, r24	; 8
		PORTB = LUT[unid];
 1ce:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <unid>
 1d2:	0e 2e       	mov	r0, r30
 1d4:	00 0c       	add	r0, r0
 1d6:	ff 0b       	sbc	r31, r31
 1d8:	e0 50       	subi	r30, 0x00	; 0
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	80 81       	ld	r24, Z
 1de:	85 b9       	out	0x05, r24	; 5
 1e0:	db cf       	rjmp	.-74     	; 0x198 <main+0x2a>

000001e2 <__divmodhi4>:
 1e2:	97 fb       	bst	r25, 7
 1e4:	07 2e       	mov	r0, r23
 1e6:	16 f4       	brtc	.+4      	; 0x1ec <__divmodhi4+0xa>
 1e8:	00 94       	com	r0
 1ea:	07 d0       	rcall	.+14     	; 0x1fa <__divmodhi4_neg1>
 1ec:	77 fd       	sbrc	r23, 7
 1ee:	09 d0       	rcall	.+18     	; 0x202 <__divmodhi4_neg2>
 1f0:	0e 94 05 01 	call	0x20a	; 0x20a <__udivmodhi4>
 1f4:	07 fc       	sbrc	r0, 7
 1f6:	05 d0       	rcall	.+10     	; 0x202 <__divmodhi4_neg2>
 1f8:	3e f4       	brtc	.+14     	; 0x208 <__divmodhi4_exit>

000001fa <__divmodhi4_neg1>:
 1fa:	90 95       	com	r25
 1fc:	81 95       	neg	r24
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	08 95       	ret

00000202 <__divmodhi4_neg2>:
 202:	70 95       	com	r23
 204:	61 95       	neg	r22
 206:	7f 4f       	sbci	r23, 0xFF	; 255

00000208 <__divmodhi4_exit>:
 208:	08 95       	ret

0000020a <__udivmodhi4>:
 20a:	aa 1b       	sub	r26, r26
 20c:	bb 1b       	sub	r27, r27
 20e:	51 e1       	ldi	r21, 0x11	; 17
 210:	07 c0       	rjmp	.+14     	; 0x220 <__udivmodhi4_ep>

00000212 <__udivmodhi4_loop>:
 212:	aa 1f       	adc	r26, r26
 214:	bb 1f       	adc	r27, r27
 216:	a6 17       	cp	r26, r22
 218:	b7 07       	cpc	r27, r23
 21a:	10 f0       	brcs	.+4      	; 0x220 <__udivmodhi4_ep>
 21c:	a6 1b       	sub	r26, r22
 21e:	b7 0b       	sbc	r27, r23

00000220 <__udivmodhi4_ep>:
 220:	88 1f       	adc	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	5a 95       	dec	r21
 226:	a9 f7       	brne	.-22     	; 0x212 <__udivmodhi4_loop>
 228:	80 95       	com	r24
 22a:	90 95       	com	r25
 22c:	bc 01       	movw	r22, r24
 22e:	cd 01       	movw	r24, r26
 230:	08 95       	ret

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
