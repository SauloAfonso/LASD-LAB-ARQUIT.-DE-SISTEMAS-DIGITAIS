
Exerc4_SaraAndrade.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000242  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000799  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b5  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000306  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d1  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001879  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000190b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 89 00 	call	0x112	; 0x112 <main>
  9e:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

int8_t dezena, unid, pausa; // Variáveis globais
uint8_t LUT[10] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B};
	
ISR(INT0_vect) // Interrupção externa 0, captura o start/pause
{	
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	if(pausa == 1)
  b2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pausa>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	19 f4       	brne	.+6      	; 0xc0 <__vector_1+0x1a>
	{
		pausa = 0;
  ba:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <pausa>
  be:	03 c0       	rjmp	.+6      	; 0xc6 <__vector_1+0x20>
	}
	else
	{
		pausa = 1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <pausa>
	}
}
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_2>:

ISR(INT1_vect) // Interrupção externa 1, captura o reset
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	dezena = 0; 
  e2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	unid = 0;
  e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <unid>
	PORTC = LUT[dezena];
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	88 b9       	out	0x08, r24	; 8
	PORTB = LUT[unid];
  f0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <unid>
  f4:	0e 2e       	mov	r0, r30
  f6:	00 0c       	add	r0, r0
  f8:	ff 0b       	sbc	r31, r31
  fa:	e0 50       	subi	r30, 0x00	; 0
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	80 81       	ld	r24, Z
 100:	85 b9       	out	0x05, r24	; 5
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:

int main(void)
{
	DDRD =	0x00; // Todos os pinos da porta D como entradas
 112:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b00001100; // Habilita pull-ups dos pinos PD2 e PD3
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	8b b9       	out	0x0b, r24	; 11
	
	DDRC =	0xFF; // Habilita Todos os pinos da porta C como saída
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 b9       	out	0x07, r24	; 7
	DDRB =	0xFF; // Habilita Todos os pinos da porta B como saída
 11c:	84 b9       	out	0x04, r24	; 4
	
	//Configuração das interrupções
	EICRA = 0b00001010;// Interrupções externas INT0 e INT1 na borda de descida
 11e:	8a e0       	ldi	r24, 0x0A	; 10
 120:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000011;// Habilita as interrupções externas INT0 e INT1
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	8d bb       	out	0x1d, r24	; 29
	sei();// Habilita interrupções globais, ativando o bit I do SREG
 128:	78 94       	sei
	
	pausa = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <pausa>
	dezena = 0;
 130:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	unid = 0;
 134:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <unid>
	while (1)
	{
		PORTC = LUT[dezena];
 138:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 13c:	0e 2e       	mov	r0, r30
 13e:	00 0c       	add	r0, r0
 140:	ff 0b       	sbc	r31, r31
 142:	e0 50       	subi	r30, 0x00	; 0
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	80 81       	ld	r24, Z
 148:	88 b9       	out	0x08, r24	; 8
		PORTB = LUT[unid];
 14a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <unid>
 14e:	0e 2e       	mov	r0, r30
 150:	00 0c       	add	r0, r0
 152:	ff 0b       	sbc	r31, r31
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	85 b9       	out	0x05, r24	; 5
		
		if(pausa != 1)
 15c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pausa>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	51 f3       	breq	.-44     	; 0x138 <main+0x26>
		{
			if(unid < 9)
 164:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <unid>
 168:	89 30       	cpi	r24, 0x09	; 9
 16a:	24 f4       	brge	.+8      	; 0x174 <main+0x62>
			{
				unid++;
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <unid>
 172:	0c c0       	rjmp	.+24     	; 0x18c <main+0x7a>
			}
			else
			{
				unid = 0;
 174:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <unid>
				
				if(dezena < 9)
 178:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 17c:	89 30       	cpi	r24, 0x09	; 9
 17e:	24 f4       	brge	.+8      	; 0x188 <main+0x76>
				{
					dezena++;
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 186:	02 c0       	rjmp	.+4      	; 0x18c <main+0x7a>
				}
				else
				{
					dezena = 0;
 188:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	83 ed       	ldi	r24, 0xD3	; 211
 190:	90 e3       	ldi	r25, 0x30	; 48
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x80>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x8a>
 19c:	00 00       	nop
 19e:	cc cf       	rjmp	.-104    	; 0x138 <main+0x26>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
