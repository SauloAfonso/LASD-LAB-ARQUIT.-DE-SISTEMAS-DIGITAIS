
Exerc8_SaraAndrade.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fd  00800100  00800100  00000732  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5e  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000901  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070a  00000000  00000000  00001f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000026a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  00002838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000672  00000000  00000000  00002d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000033b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
   4:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
   8:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
   c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  10:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  14:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  18:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  1c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  20:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  24:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  28:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  2c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  30:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  34:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  38:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  3c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  40:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  44:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  48:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  4c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  50:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  54:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_21>
  58:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  5c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  60:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  64:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>

00000068 <CHARSET>:
  68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
 248:	11 24       	eor	r1, r1
 24a:	1f be       	out	0x3f, r1	; 63
 24c:	cf ef       	ldi	r28, 0xFF	; 255
 24e:	d8 e0       	ldi	r29, 0x08	; 8
 250:	de bf       	out	0x3e, r29	; 62
 252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_clear_bss>:
 254:	22 e0       	ldi	r18, 0x02	; 2
 256:	a0 e0       	ldi	r26, 0x00	; 0
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
 25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
 25e:	ad 3f       	cpi	r26, 0xFD	; 253
 260:	b2 07       	cpc	r27, r18
 262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>
 264:	0e 94 88 01 	call	0x310	; 0x310 <main>
 268:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

0000026c <__bad_interrupt>:
 26c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000270 <__vector_21>:
#define tam_vetor 2 
unsigned char leitura_ADC_string[tam_vetor];
int8_t count = 0;

ISR(ADC_vect)
{
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
	OCR0A  = ADC / 4;
 280:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 284:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	87 bd       	out	0x27, r24	; 39
	count = (OCR0A * 100) / 256;
 292:	87 b5       	in	r24, 0x27	; 39
 294:	24 e6       	ldi	r18, 0x64	; 100
 296:	82 9f       	mul	r24, r18
 298:	c0 01       	movw	r24, r0
 29a:	11 24       	eor	r1, r1
 29c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <int2string>:

//------------------------------------------------------------------------------------
// Conversão de inteiro para string
//------------------------------------------------------------------------------------
void int2string(unsigned int valor, unsigned char *disp)
{
 2b0:	ac 01       	movw	r20, r24
 2b2:	fb 01       	movw	r30, r22
	for(uint8_t n=0; n<tam_vetor; n++)
	disp[n] = 0 + 48; // Limpa vetor para armazenagem dos digitos
 2b4:	80 e3       	ldi	r24, 0x30	; 48
 2b6:	80 83       	st	Z, r24
 2b8:	81 83       	std	Z+1, r24	; 0x01
 2ba:	32 96       	adiw	r30, 0x02	; 2
	disp += (tam_vetor-1);
	do
	{
		*disp = (valor%10) + 48; // Pega o resto da divisão por 10
 2bc:	9a 01       	movw	r18, r20
 2be:	ad ec       	ldi	r26, 0xCD	; 205
 2c0:	bc ec       	ldi	r27, 0xCC	; 204
 2c2:	0e 94 4e 03 	call	0x69c	; 0x69c <__umulhisi3>
 2c6:	96 95       	lsr	r25
 2c8:	87 95       	ror	r24
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	96 95       	lsr	r25
 2d0:	87 95       	ror	r24
 2d2:	9c 01       	movw	r18, r24
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	82 0f       	add	r24, r18
 2e6:	93 1f       	adc	r25, r19
 2e8:	9a 01       	movw	r18, r20
 2ea:	28 1b       	sub	r18, r24
 2ec:	39 0b       	sbc	r19, r25
 2ee:	c9 01       	movw	r24, r18
 2f0:	80 5d       	subi	r24, 0xD0	; 208
 2f2:	82 93       	st	-Z, r24
		valor /=10; // Pega o inteiro da divisão por 10
 2f4:	9a 01       	movw	r18, r20
 2f6:	0e 94 4e 03 	call	0x69c	; 0x69c <__umulhisi3>
 2fa:	ac 01       	movw	r20, r24
 2fc:	56 95       	lsr	r21
 2fe:	47 95       	ror	r20
 300:	56 95       	lsr	r21
 302:	47 95       	ror	r20
 304:	56 95       	lsr	r21
 306:	47 95       	ror	r20
		disp--;
	}while (valor!=0);
 308:	41 15       	cp	r20, r1
 30a:	51 05       	cpc	r21, r1
 30c:	b9 f6       	brne	.-82     	; 0x2bc <int2string+0xc>
}
 30e:	08 95       	ret

00000310 <main>:

int main()
{
	DDRB = 0xFF; // Portas B como saída
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF; // Portas D como saída
 314:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00; // Portas C como entrada
 316:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFE; // Desabilita o pullup do PC0
 318:	8e ef       	ldi	r24, 0xFE	; 254
 31a:	88 b9       	out	0x08, r24	; 8
	
	// Fast PWM, TOP = 0xFF, OC0A habilitado
	TCCR0A = 0b10000011; // PWM não invertido no pino OC0A
 31c:	83 e8       	ldi	r24, 0x83	; 131
 31e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101; // Liga TC0, prescaler = 1024, fpwm = f0sc/(256*prescaler) = 16MHz/(256*1024) = 61Hz
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0; // Controle do ciclo ativo do PWM 0C0A
 324:	17 bc       	out	0x27, r1	; 39

	// Configurações ADC
	ADMUX = 0b01000000; // Tensão AVCC, canal 0
 326:	80 e4       	ldi	r24, 0x40	; 64
 328:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11101111; // Habilita o AD, habilita interrupção, modo de conversão contínua, prescaler = 128
 32c:	8f ee       	ldi	r24, 0xEF	; 239
 32e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0x00; // Mdo de conversão contínua
 332:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b00111110; // Habilita pino PC0 como entrada do ADC0
 336:	8e e3       	ldi	r24, 0x3E	; 62
 338:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	sei(); // Habilita interrupções globais
 33c:	78 94       	sei
	nokia_lcd_init(); // Inicia o LCD
 33e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <nokia_lcd_init>
	
	while(1)
	{
		nokia_lcd_clear(); // Limpa o LCD
 342:	0e 94 24 02 	call	0x448	; 0x448 <nokia_lcd_clear>
		int2string(count, leitura_ADC_string); // Converte a leitura do ADC em string
 346:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 34a:	6b ef       	ldi	r22, 0xFB	; 251
 34c:	72 e0       	ldi	r23, 0x02	; 2
 34e:	08 2e       	mov	r0, r24
 350:	00 0c       	add	r0, r0
 352:	99 0b       	sbc	r25, r25
 354:	0e 94 58 01 	call	0x2b0	; 0x2b0 <int2string>
		nokia_lcd_set_cursor(20, 10);
 358:	6a e0       	ldi	r22, 0x0A	; 10
 35a:	84 e1       	ldi	r24, 0x14	; 20
 35c:	0e 94 23 03 	call	0x646	; 0x646 <nokia_lcd_set_cursor>
		nokia_lcd_write_string(leitura_ADC_string, 4); // Escreve a leitura no buffer do LCD
 360:	64 e0       	ldi	r22, 0x04	; 4
 362:	8b ef       	ldi	r24, 0xFB	; 251
 364:	92 e0       	ldi	r25, 0x02	; 2
 366:	0e 94 10 03 	call	0x620	; 0x620 <nokia_lcd_write_string>
		nokia_lcd_render(); // Atualiza a tela do display com o conteúdo do buffer
 36a:	0e 94 28 03 	call	0x650	; 0x650 <nokia_lcd_render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	83 ed       	ldi	r24, 0xD3	; 211
 372:	90 e3       	ldi	r25, 0x30	; 48
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x64>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0x6e>
 37e:	00 00       	nop
 380:	e0 cf       	rjmp	.-64     	; 0x342 <main+0x32>

00000382 <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
 382:	29 98       	cbi	0x05, 1	; 5
 384:	66 23       	and	r22, r22
 386:	11 f0       	breq	.+4      	; 0x38c <write+0xa>
 388:	2b 9a       	sbi	0x05, 3	; 5
 38a:	15 c0       	rjmp	.+42     	; 0x3b6 <write+0x34>
 38c:	2b 98       	cbi	0x05, 3	; 5
 38e:	13 c0       	rjmp	.+38     	; 0x3b6 <write+0x34>
 390:	ac 01       	movw	r20, r24
 392:	02 2e       	mov	r0, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <write+0x18>
 396:	55 95       	asr	r21
 398:	47 95       	ror	r20
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <write+0x14>
 39e:	40 ff       	sbrs	r20, 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <write+0x24>
 3a2:	2c 9a       	sbi	0x05, 4	; 5
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <write+0x26>
 3a6:	2c 98       	cbi	0x05, 4	; 5
 3a8:	2d 9a       	sbi	0x05, 5	; 5
 3aa:	2d 98       	cbi	0x05, 5	; 5
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	31 09       	sbc	r19, r1
 3b0:	78 f7       	brcc	.-34     	; 0x390 <write+0xe>
 3b2:	29 9a       	sbi	0x05, 1	; 5
 3b4:	08 95       	ret
 3b6:	27 e0       	ldi	r18, 0x07	; 7
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	e9 cf       	rjmp	.-46     	; 0x390 <write+0xe>

000003be <write_cmd>:
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	0e 94 c1 01 	call	0x382	; 0x382 <write>
 3c4:	08 95       	ret

000003c6 <nokia_lcd_init>:
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	21 9a       	sbi	0x04, 1	; 4
 3cc:	22 9a       	sbi	0x04, 2	; 4
 3ce:	23 9a       	sbi	0x04, 3	; 4
 3d0:	24 9a       	sbi	0x04, 4	; 4
 3d2:	25 9a       	sbi	0x04, 5	; 4
 3d4:	2a 9a       	sbi	0x05, 2	; 5
 3d6:	29 9a       	sbi	0x05, 1	; 5
 3d8:	83 ec       	ldi	r24, 0xC3	; 195
 3da:	99 e0       	ldi	r25, 0x09	; 9
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <nokia_lcd_init+0x16>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <nokia_lcd_init+0x1c>
 3e2:	00 00       	nop
 3e4:	2a 98       	cbi	0x05, 2	; 5
 3e6:	8b e5       	ldi	r24, 0x5B	; 91
 3e8:	94 e4       	ldi	r25, 0x44	; 68
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <nokia_lcd_init+0x24>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <nokia_lcd_init+0x2a>
 3f0:	00 00       	nop
 3f2:	2a 9a       	sbi	0x05, 2	; 5
 3f4:	29 98       	cbi	0x05, 1	; 5
 3f6:	81 e2       	ldi	r24, 0x21	; 33
 3f8:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 3fc:	83 e1       	ldi	r24, 0x13	; 19
 3fe:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 408:	82 ec       	ldi	r24, 0xC2	; 194
 40a:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 40e:	80 e2       	ldi	r24, 0x20	; 32
 410:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 414:	89 e0       	ldi	r24, 0x09	; 9
 416:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 420:	80 e4       	ldi	r24, 0x40	; 64
 422:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 426:	c8 ef       	ldi	r28, 0xF8	; 248
 428:	d1 e0       	ldi	r29, 0x01	; 1
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 c1 01 	call	0x382	; 0x382 <write>
 432:	21 97       	sbiw	r28, 0x01	; 1
 434:	d1 f7       	brne	.-12     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 436:	88 e0       	ldi	r24, 0x08	; 8
 438:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 43c:	8c e0       	ldi	r24, 0x0C	; 12
 43e:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <nokia_lcd_clear>:
 448:	80 e8       	ldi	r24, 0x80	; 128
 44a:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 44e:	80 e4       	ldi	r24, 0x40	; 64
 450:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 454:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <nokia_lcd+0x1f8>
 458:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <nokia_lcd+0x1f9>
 45c:	e1 e0       	ldi	r30, 0x01	; 1
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	89 ef       	ldi	r24, 0xF9	; 249
 462:	92 e0       	ldi	r25, 0x02	; 2
 464:	11 92       	st	Z+, r1
 466:	e8 17       	cp	r30, r24
 468:	f9 07       	cpc	r31, r25
 46a:	e1 f7       	brne	.-8      	; 0x464 <nokia_lcd_clear+0x1c>
 46c:	08 95       	ret

0000046e <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
 46e:	26 2f       	mov	r18, r22
 470:	26 95       	lsr	r18
 472:	26 95       	lsr	r18
 474:	26 95       	lsr	r18
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	34 e5       	ldi	r19, 0x54	; 84
 47a:	23 9f       	mul	r18, r19
 47c:	80 0d       	add	r24, r0
 47e:	91 1d       	adc	r25, r1
 480:	11 24       	eor	r1, r1
	if (value)
 482:	44 23       	and	r20, r20
 484:	79 f0       	breq	.+30     	; 0x4a4 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
 486:	fc 01       	movw	r30, r24
 488:	ef 5f       	subi	r30, 0xFF	; 255
 48a:	fe 4f       	sbci	r31, 0xFE	; 254
 48c:	67 70       	andi	r22, 0x07	; 7
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <nokia_lcd_set_pixel+0x2a>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <nokia_lcd_set_pixel+0x26>
 49c:	90 81       	ld	r25, Z
 49e:	89 2b       	or	r24, r25
 4a0:	80 83       	st	Z, r24
 4a2:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
 4a4:	fc 01       	movw	r30, r24
 4a6:	ef 5f       	subi	r30, 0xFF	; 255
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	67 70       	andi	r22, 0x07	; 7
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <nokia_lcd_set_pixel+0x48>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <nokia_lcd_set_pixel+0x44>
 4ba:	80 95       	com	r24
 4bc:	90 81       	ld	r25, Z
 4be:	89 23       	and	r24, r25
 4c0:	80 83       	st	Z, r24
 4c2:	08 95       	ret

000004c4 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
 4c4:	5f 92       	push	r5
 4c6:	6f 92       	push	r6
 4c8:	7f 92       	push	r7
 4ca:	8f 92       	push	r8
 4cc:	9f 92       	push	r9
 4ce:	af 92       	push	r10
 4d0:	bf 92       	push	r11
 4d2:	cf 92       	push	r12
 4d4:	df 92       	push	r13
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 4e4:	26 2f       	mov	r18, r22
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	49 01       	movw	r8, r18
 4ea:	88 0c       	add	r8, r8
 4ec:	99 1c       	adc	r9, r9
 4ee:	88 0c       	add	r8, r8
 4f0:	99 1c       	adc	r9, r9
 4f2:	82 0e       	add	r8, r18
 4f4:	93 1e       	adc	r9, r19
 4f6:	18 14       	cp	r1, r8
 4f8:	19 04       	cpc	r1, r9
 4fa:	0c f0       	brlt	.+2      	; 0x4fe <nokia_lcd_write_char+0x3a>
 4fc:	5d c0       	rjmp	.+186    	; 0x5b8 <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
 4fe:	89 01       	movw	r16, r18
 500:	00 0f       	add	r16, r16
 502:	11 1f       	adc	r17, r17
 504:	00 0f       	add	r16, r16
 506:	11 1f       	adc	r17, r17
 508:	00 0f       	add	r16, r16
 50a:	11 1f       	adc	r17, r17
 50c:	02 1b       	sub	r16, r18
 50e:	13 0b       	sbc	r17, r19
 510:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 512:	a8 2e       	mov	r10, r24
 514:	b1 2c       	mov	r11, r1
 516:	c5 01       	movw	r24, r10
 518:	80 97       	sbiw	r24, 0x20	; 32
 51a:	5c 01       	movw	r10, r24
 51c:	aa 0c       	add	r10, r10
 51e:	bb 1c       	adc	r11, r11
 520:	aa 0c       	add	r10, r10
 522:	bb 1c       	adc	r11, r11
 524:	a8 0e       	add	r10, r24
 526:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 528:	0f 2e       	mov	r0, r31
 52a:	fa ef       	ldi	r31, 0xFA	; 250
 52c:	cf 2e       	mov	r12, r31
 52e:	f2 e0       	ldi	r31, 0x02	; 2
 530:	df 2e       	mov	r13, r31
 532:	f0 2d       	mov	r31, r0
 534:	0f 2e       	mov	r0, r31
 536:	f9 ef       	ldi	r31, 0xF9	; 249
 538:	ef 2e       	mov	r14, r31
 53a:	f2 e0       	ldi	r31, 0x02	; 2
 53c:	ff 2e       	mov	r15, r31
 53e:	f0 2d       	mov	r31, r0
 540:	2d c0       	rjmp	.+90     	; 0x59c <nokia_lcd_write_char+0xd8>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 542:	fe 01       	movw	r30, r28
 544:	24 91       	lpm	r18, Z
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	87 2d       	mov	r24, r7
 54a:	65 2d       	mov	r22, r5
 54c:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodqi4>
 550:	02 c0       	rjmp	.+4      	; 0x556 <nokia_lcd_write_char+0x92>
 552:	35 95       	asr	r19
 554:	27 95       	ror	r18
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <nokia_lcd_write_char+0x8e>
 55a:	20 ff       	sbrs	r18, 0
 55c:	0a c0       	rjmp	.+20     	; 0x572 <nokia_lcd_write_char+0xae>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
 55e:	f6 01       	movw	r30, r12
 560:	60 81       	ld	r22, Z
 562:	67 0d       	add	r22, r7
 564:	f7 01       	movw	r30, r14
 566:	80 81       	ld	r24, Z
 568:	41 e0       	ldi	r20, 0x01	; 1
 56a:	86 0d       	add	r24, r6
 56c:	0e 94 37 02 	call	0x46e	; 0x46e <nokia_lcd_set_pixel>
 570:	09 c0       	rjmp	.+18     	; 0x584 <nokia_lcd_write_char+0xc0>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
 572:	f6 01       	movw	r30, r12
 574:	60 81       	ld	r22, Z
 576:	67 0d       	add	r22, r7
 578:	f7 01       	movw	r30, r14
 57a:	80 81       	ld	r24, Z
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	86 0d       	add	r24, r6
 580:	0e 94 37 02 	call	0x46e	; 0x46e <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
 584:	73 94       	inc	r7
 586:	87 2d       	mov	r24, r7
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	80 17       	cp	r24, r16
 58c:	91 07       	cpc	r25, r17
 58e:	cc f2       	brlt	.-78     	; 0x542 <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
 590:	63 94       	inc	r6
 592:	86 2d       	mov	r24, r6
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	88 15       	cp	r24, r8
 598:	99 05       	cpc	r25, r9
 59a:	74 f4       	brge	.+28     	; 0x5b8 <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
 59c:	10 16       	cp	r1, r16
 59e:	11 06       	cpc	r1, r17
 5a0:	bc f7       	brge	.-18     	; 0x590 <nokia_lcd_write_char+0xcc>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
 5a2:	86 2d       	mov	r24, r6
 5a4:	65 2d       	mov	r22, r5
 5a6:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodqi4>
 5aa:	e5 01       	movw	r28, r10
 5ac:	c8 0f       	add	r28, r24
 5ae:	d1 1d       	adc	r29, r1
 5b0:	c8 59       	subi	r28, 0x98	; 152
 5b2:	df 4f       	sbci	r29, 0xFF	; 255
 5b4:	71 2c       	mov	r7, r1
 5b6:	c5 cf       	rjmp	.-118    	; 0x542 <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 5b8:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <nokia_lcd+0x1f8>
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	98 0f       	add	r25, r24
 5c0:	85 2d       	mov	r24, r5
 5c2:	88 0f       	add	r24, r24
 5c4:	88 0f       	add	r24, r24
 5c6:	85 0d       	add	r24, r5
 5c8:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
 5ca:	84 35       	cpi	r24, 0x54	; 84
 5cc:	18 f4       	brcc	.+6      	; 0x5d4 <nokia_lcd_write_char+0x110>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
 5ce:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <nokia_lcd+0x1f8>
 5d2:	0e c0       	rjmp	.+28     	; 0x5f0 <nokia_lcd_write_char+0x12c>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
 5d4:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
 5d8:	ea ef       	ldi	r30, 0xFA	; 250
 5da:	f2 e0       	ldi	r31, 0x02	; 2
 5dc:	80 81       	ld	r24, Z
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	98 0f       	add	r25, r24
 5e2:	85 2d       	mov	r24, r5
 5e4:	88 0f       	add	r24, r24
 5e6:	88 0f       	add	r24, r24
 5e8:	88 0f       	add	r24, r24
 5ea:	85 19       	sub	r24, r5
 5ec:	89 0f       	add	r24, r25
 5ee:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
 5f0:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <nokia_lcd+0x1f9>
 5f4:	80 33       	cpi	r24, 0x30	; 48
 5f6:	20 f0       	brcs	.+8      	; 0x600 <nokia_lcd_write_char+0x13c>
		nokia_lcd.cursor_x = 0;
 5f8:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
 5fc:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <nokia_lcd+0x1f9>
	}
}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	ff 90       	pop	r15
 60a:	ef 90       	pop	r14
 60c:	df 90       	pop	r13
 60e:	cf 90       	pop	r12
 610:	bf 90       	pop	r11
 612:	af 90       	pop	r10
 614:	9f 90       	pop	r9
 616:	8f 90       	pop	r8
 618:	7f 90       	pop	r7
 61a:	6f 90       	pop	r6
 61c:	5f 90       	pop	r5
 61e:	08 95       	ret

00000620 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
 620:	1f 93       	push	r17
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	ec 01       	movw	r28, r24
	while(*str)
 628:	88 81       	ld	r24, Y
 62a:	88 23       	and	r24, r24
 62c:	41 f0       	breq	.+16     	; 0x63e <nokia_lcd_write_string+0x1e>
 62e:	16 2f       	mov	r17, r22
 630:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
 632:	61 2f       	mov	r22, r17
 634:	0e 94 62 02 	call	0x4c4	; 0x4c4 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
 638:	89 91       	ld	r24, Y+
 63a:	81 11       	cpse	r24, r1
 63c:	fa cf       	rjmp	.-12     	; 0x632 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	08 95       	ret

00000646 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
 646:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
 64a:	60 93 fa 02 	sts	0x02FA, r22	; 0x8002fa <nokia_lcd+0x1f9>
 64e:	08 95       	ret

00000650 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
 650:	0f 93       	push	r16
 652:	1f 93       	push	r17
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
 658:	80 e8       	ldi	r24, 0x80	; 128
 65a:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
	write_cmd(0x40);
 65e:	80 e4       	ldi	r24, 0x40	; 64
 660:	0e 94 df 01 	call	0x3be	; 0x3be <write_cmd>
 664:	c1 e0       	ldi	r28, 0x01	; 1
 666:	d1 e0       	ldi	r29, 0x01	; 1
 668:	09 ef       	ldi	r16, 0xF9	; 249
 66a:	12 e0       	ldi	r17, 0x02	; 2
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	89 91       	ld	r24, Y+
 670:	0e 94 c1 01 	call	0x382	; 0x382 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
 674:	c0 17       	cp	r28, r16
 676:	d1 07       	cpc	r29, r17
 678:	c9 f7       	brne	.-14     	; 0x66c <nokia_lcd_render+0x1c>
		write_data(nokia_lcd.screen[i]);
}
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	1f 91       	pop	r17
 680:	0f 91       	pop	r16
 682:	08 95       	ret

00000684 <__udivmodqi4>:
 684:	99 1b       	sub	r25, r25
 686:	79 e0       	ldi	r23, 0x09	; 9
 688:	04 c0       	rjmp	.+8      	; 0x692 <__udivmodqi4_ep>

0000068a <__udivmodqi4_loop>:
 68a:	99 1f       	adc	r25, r25
 68c:	96 17       	cp	r25, r22
 68e:	08 f0       	brcs	.+2      	; 0x692 <__udivmodqi4_ep>
 690:	96 1b       	sub	r25, r22

00000692 <__udivmodqi4_ep>:
 692:	88 1f       	adc	r24, r24
 694:	7a 95       	dec	r23
 696:	c9 f7       	brne	.-14     	; 0x68a <__udivmodqi4_loop>
 698:	80 95       	com	r24
 69a:	08 95       	ret

0000069c <__umulhisi3>:
 69c:	a2 9f       	mul	r26, r18
 69e:	b0 01       	movw	r22, r0
 6a0:	b3 9f       	mul	r27, r19
 6a2:	c0 01       	movw	r24, r0
 6a4:	a3 9f       	mul	r26, r19
 6a6:	70 0d       	add	r23, r0
 6a8:	81 1d       	adc	r24, r1
 6aa:	11 24       	eor	r1, r1
 6ac:	91 1d       	adc	r25, r1
 6ae:	b2 9f       	mul	r27, r18
 6b0:	70 0d       	add	r23, r0
 6b2:	81 1d       	adc	r24, r1
 6b4:	11 24       	eor	r1, r1
 6b6:	91 1d       	adc	r25, r1
 6b8:	08 95       	ret

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
