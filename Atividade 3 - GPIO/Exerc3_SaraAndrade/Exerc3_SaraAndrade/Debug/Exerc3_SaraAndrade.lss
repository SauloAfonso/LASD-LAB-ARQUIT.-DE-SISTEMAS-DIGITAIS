
Exerc3_SaraAndrade.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002c6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c2  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00000c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ef  00000000  00000000  0000135d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f9  00000000  00000000  00001b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	60 97       	sbiw	r28, 0x10	; 16
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	DDRB  = 0b11111111; //Habilita os pinos PB0..6 como saídas
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
	DDRD  &= ~(1<<0);	//DDRD  &= 0b11111110; Habilita o pino PD0 como entrada
  ae:	50 98       	cbi	0x0a, 0	; 10
	PORTD |= (1<<0);	//PORTD |= 0b00000001; Habilita o resistor de pull-up do pino PD0
  b0:	58 9a       	sbi	0x0b, 0	; 11

	int8_t cont = 0, cont_4 = 8;
	uint8_t num = 0;
	uint8_t LED[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
  b2:	88 e0       	ldi	r24, 0x08	; 8
  b4:	e0 e0       	ldi	r30, 0x00	; 0
  b6:	f1 e0       	ldi	r31, 0x01	; 1
  b8:	de 01       	movw	r26, r28
  ba:	11 96       	adiw	r26, 0x01	; 1
  bc:	01 90       	ld	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	8a 95       	dec	r24
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x26>
	uint8_t LED_3[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	e8 e0       	ldi	r30, 0x08	; 8
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	de 01       	movw	r26, r28
  cc:	19 96       	adiw	r26, 0x09	; 9
  ce:	01 90       	ld	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	8a 95       	dec	r24
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x38>
	DDRB  = 0b11111111; //Habilita os pinos PB0..6 como saídas
	DDRD  &= ~(1<<0);	//DDRD  &= 0b11111110; Habilita o pino PD0 como entrada
	PORTD |= (1<<0);	//PORTD |= 0b00000001; Habilita o resistor de pull-up do pino PD0

	int8_t cont = 0, cont_4 = 8;
	uint8_t num = 0;
  d6:	20 e0       	ldi	r18, 0x00	; 0
{
	DDRB  = 0b11111111; //Habilita os pinos PB0..6 como saídas
	DDRD  &= ~(1<<0);	//DDRD  &= 0b11111110; Habilita o pino PD0 como entrada
	PORTD |= (1<<0);	//PORTD |= 0b00000001; Habilita o resistor de pull-up do pino PD0

	int8_t cont = 0, cont_4 = 8;
  d8:	38 e0       	ldi	r19, 0x08	; 8
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <main+0x4a>
			num = 0;
		
		switch (num)
		{
		case 0:
			while((PIND & (1<<0)))
  de:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t LED[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
	uint8_t LED_3[8] = {0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff};

	while (1)
	{   
		if (!(PIND & (1<<0))) //Retorna 1 se PD0 for 1 ... e 0 se PD0 for 0
  e0:	48 99       	sbic	0x09, 0	; 9
  e2:	03 c0       	rjmp	.+6      	; 0xea <main+0x54>
		{
			while(!(PIND & (1<<0)));//Trava o programa até que o botão seja liberado
  e4:	48 9b       	sbis	0x09, 0	; 9
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x4e>
			num++;
  e8:	2f 5f       	subi	r18, 0xFF	; 255
		}
		if (num==5)
  ea:	25 30       	cpi	r18, 0x05	; 5
  ec:	f9 f0       	breq	.+62     	; 0x12c <main+0x96>
			num = 0;
		
		switch (num)
  ee:	22 30       	cpi	r18, 0x02	; 2
  f0:	a1 f0       	breq	.+40     	; 0x11a <main+0x84>
  f2:	28 f4       	brcc	.+10     	; 0xfe <main+0x68>
  f4:	22 23       	and	r18, r18
  f6:	d1 f0       	breq	.+52     	; 0x12c <main+0x96>
  f8:	21 30       	cpi	r18, 0x01	; 1
  fa:	a9 f0       	breq	.+42     	; 0x126 <main+0x90>
  fc:	f1 cf       	rjmp	.-30     	; 0xe0 <main+0x4a>
  fe:	23 30       	cpi	r18, 0x03	; 3
 100:	41 f0       	breq	.+16     	; 0x112 <main+0x7c>
 102:	24 30       	cpi	r18, 0x04	; 4
 104:	69 f7       	brne	.-38     	; 0xe0 <main+0x4a>
				}
				_delay_ms(100);
			}
			break;
		case 4:
			while(cont != cont_4 && (PIND & (1<<0)))
 106:	83 17       	cp	r24, r19
 108:	09 f4       	brne	.+2      	; 0x10c <main+0x76>
 10a:	b1 c0       	rjmp	.+354    	; 0x26e <main+0x1d8>
 10c:	48 99       	sbic	0x09, 0	; 9
 10e:	96 c0       	rjmp	.+300    	; 0x23c <main+0x1a6>
 110:	af c0       	rjmp	.+350    	; 0x270 <main+0x1da>
					_delay_ms(100);
				}
			break;
		case 3:
			cont = 0;
			while((PIND & (1<<0)))
 112:	48 99       	sbic	0x09, 0	; 9
 114:	d2 c0       	rjmp	.+420    	; 0x2ba <main+0x224>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	e3 cf       	rjmp	.-58     	; 0xe0 <main+0x4a>
				PORTB = LED[cont];
				_delay_ms(100);		
			}
			break;
		case 2:
				while(cont != 8 && (PIND & (1<<0)))
 11a:	88 30       	cpi	r24, 0x08	; 8
 11c:	09 f4       	brne	.+2      	; 0x120 <main+0x8a>
 11e:	cb c0       	rjmp	.+406    	; 0x2b6 <main+0x220>
 120:	48 99       	sbic	0x09, 0	; 9
 122:	3a c0       	rjmp	.+116    	; 0x198 <main+0x102>
 124:	52 c0       	rjmp	.+164    	; 0x1ca <main+0x134>
				}
				_delay_ms(100);
			}
			break;
		case 1:
			while((PIND & (1<<0)))
 126:	48 99       	sbic	0x09, 0	; 9
 128:	1e c0       	rjmp	.+60     	; 0x166 <main+0xd0>
 12a:	da cf       	rjmp	.-76     	; 0xe0 <main+0x4a>
			num = 0;
		
		switch (num)
		{
		case 0:
			while((PIND & (1<<0)))
 12c:	48 9b       	sbis	0x09, 0	; 9
 12e:	d7 cf       	rjmp	.-82     	; 0xde <main+0x48>
			{
				PORTB = LED[cont];
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e8 0f       	add	r30, r24
 13a:	f1 1d       	adc	r31, r1
 13c:	87 fd       	sbrc	r24, 7
 13e:	fa 95       	dec	r31
 140:	90 81       	ld	r25, Z
 142:	95 b9       	out	0x05, r25	; 5
				cont++;
 144:	8f 5f       	subi	r24, 0xFF	; 255
				if(cont == 8)
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	09 f4       	brne	.+2      	; 0x14c <main+0xb6>
				{
					cont = 0;
 14a:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	41 ee       	ldi	r20, 0xE1	; 225
 150:	54 e0       	ldi	r21, 0x04	; 4
 152:	21 50       	subi	r18, 0x01	; 1
 154:	40 40       	sbci	r20, 0x00	; 0
 156:	50 40       	sbci	r21, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0xbc>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xc6>
 15c:	00 00       	nop
			num = 0;
		
		switch (num)
		{
		case 0:
			while((PIND & (1<<0)))
 15e:	48 99       	sbic	0x09, 0	; 9
 160:	e7 cf       	rjmp	.-50     	; 0x130 <main+0x9a>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	bd cf       	rjmp	.-134    	; 0xe0 <main+0x4a>
			}
			break;
		case 1:
			while((PIND & (1<<0)))
			{
				cont--;
 166:	81 50       	subi	r24, 0x01	; 1
 168:	08 f4       	brcc	.+2      	; 0x16c <main+0xd6>
				if(cont == -1)
				{
					cont = 7;
 16a:	87 e0       	ldi	r24, 0x07	; 7
				}
				PORTB = LED[cont];
 16c:	e1 e0       	ldi	r30, 0x01	; 1
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ec 0f       	add	r30, r28
 172:	fd 1f       	adc	r31, r29
 174:	e8 0f       	add	r30, r24
 176:	f1 1d       	adc	r31, r1
 178:	87 fd       	sbrc	r24, 7
 17a:	fa 95       	dec	r31
 17c:	90 81       	ld	r25, Z
 17e:	95 b9       	out	0x05, r25	; 5
 180:	9f ef       	ldi	r25, 0xFF	; 255
 182:	41 ee       	ldi	r20, 0xE1	; 225
 184:	54 e0       	ldi	r21, 0x04	; 4
 186:	91 50       	subi	r25, 0x01	; 1
 188:	40 40       	sbci	r20, 0x00	; 0
 18a:	50 40       	sbci	r21, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0xf0>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0xfa>
 190:	00 00       	nop
				}
				_delay_ms(100);
			}
			break;
		case 1:
			while((PIND & (1<<0)))
 192:	48 99       	sbic	0x09, 0	; 9
 194:	e8 cf       	rjmp	.-48     	; 0x166 <main+0xd0>
 196:	a4 cf       	rjmp	.-184    	; 0xe0 <main+0x4a>
			}
			break;
		case 2:
				while(cont != 8 && (PIND & (1<<0)))
				{
					PORTB = LED[cont];
 198:	e1 e0       	ldi	r30, 0x01	; 1
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ec 0f       	add	r30, r28
 19e:	fd 1f       	adc	r31, r29
 1a0:	e8 0f       	add	r30, r24
 1a2:	f1 1d       	adc	r31, r1
 1a4:	87 fd       	sbrc	r24, 7
 1a6:	fa 95       	dec	r31
 1a8:	90 81       	ld	r25, Z
 1aa:	95 b9       	out	0x05, r25	; 5
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	9f ef       	ldi	r25, 0xFF	; 255
 1b0:	41 ee       	ldi	r20, 0xE1	; 225
 1b2:	54 e0       	ldi	r21, 0x04	; 4
 1b4:	91 50       	subi	r25, 0x01	; 1
 1b6:	40 40       	sbci	r20, 0x00	; 0
 1b8:	50 40       	sbci	r21, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x11e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x128>
 1be:	00 00       	nop
				PORTB = LED[cont];
				_delay_ms(100);		
			}
			break;
		case 2:
				while(cont != 8 && (PIND & (1<<0)))
 1c0:	88 30       	cpi	r24, 0x08	; 8
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <main+0x130>
 1c4:	78 c0       	rjmp	.+240    	; 0x2b6 <main+0x220>
 1c6:	48 99       	sbic	0x09, 0	; 9
 1c8:	e7 cf       	rjmp	.-50     	; 0x198 <main+0x102>
				{
					PORTB = LED[cont];
					cont++;
					_delay_ms(100);
				}
				cont--;
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	08 f4       	brcc	.+2      	; 0x1d0 <main+0x13a>
 1ce:	88 cf       	rjmp	.-240    	; 0xe0 <main+0x4a>
				while(cont != -1 && (PIND & (1<<0)))
 1d0:	48 9b       	sbis	0x09, 0	; 9
 1d2:	86 cf       	rjmp	.-244    	; 0xe0 <main+0x4a>
				{
					PORTB = LED[cont];
 1d4:	e1 e0       	ldi	r30, 0x01	; 1
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	ec 0f       	add	r30, r28
 1da:	fd 1f       	adc	r31, r29
 1dc:	e8 0f       	add	r30, r24
 1de:	f1 1d       	adc	r31, r1
 1e0:	87 fd       	sbrc	r24, 7
 1e2:	fa 95       	dec	r31
 1e4:	90 81       	ld	r25, Z
 1e6:	95 b9       	out	0x05, r25	; 5
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	41 ee       	ldi	r20, 0xE1	; 225
 1ee:	54 e0       	ldi	r21, 0x04	; 4
 1f0:	91 50       	subi	r25, 0x01	; 1
 1f2:	40 40       	sbci	r20, 0x00	; 0
 1f4:	50 40       	sbci	r21, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x15a>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x164>
 1fa:	00 00       	nop
					PORTB = LED[cont];
					cont++;
					_delay_ms(100);
				}
				cont--;
				while(cont != -1 && (PIND & (1<<0)))
 1fc:	8f 3f       	cpi	r24, 0xFF	; 255
 1fe:	09 f4       	brne	.+2      	; 0x202 <main+0x16c>
 200:	6f cf       	rjmp	.-290    	; 0xe0 <main+0x4a>
 202:	48 99       	sbic	0x09, 0	; 9
 204:	e7 cf       	rjmp	.-50     	; 0x1d4 <main+0x13e>
 206:	6c cf       	rjmp	.-296    	; 0xe0 <main+0x4a>
			break;
		case 3:
			cont = 0;
			while((PIND & (1<<0)))
			{
				PORTB = LED_3[cont];
 208:	e9 e0       	ldi	r30, 0x09	; 9
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ec 0f       	add	r30, r28
 20e:	fd 1f       	adc	r31, r29
 210:	e8 0f       	add	r30, r24
 212:	f1 1d       	adc	r31, r1
 214:	87 fd       	sbrc	r24, 7
 216:	fa 95       	dec	r31
 218:	90 81       	ld	r25, Z
 21a:	95 b9       	out	0x05, r25	; 5
				cont++;
 21c:	8f 5f       	subi	r24, 0xFF	; 255
				if(cont == 8)
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	09 f4       	brne	.+2      	; 0x224 <main+0x18e>
				{
					cont = 0;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	41 ee       	ldi	r20, 0xE1	; 225
 228:	54 e0       	ldi	r21, 0x04	; 4
 22a:	91 50       	subi	r25, 0x01	; 1
 22c:	40 40       	sbci	r20, 0x00	; 0
 22e:	50 40       	sbci	r21, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x194>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x19e>
 234:	00 00       	nop
					_delay_ms(100);
				}
			break;
		case 3:
			cont = 0;
			while((PIND & (1<<0)))
 236:	48 99       	sbic	0x09, 0	; 9
 238:	e7 cf       	rjmp	.-50     	; 0x208 <main+0x172>
 23a:	52 cf       	rjmp	.-348    	; 0xe0 <main+0x4a>
			}
			break;
		case 4:
			while(cont != cont_4 && (PIND & (1<<0)))
			{
				PORTB = LED[cont];
 23c:	e1 e0       	ldi	r30, 0x01	; 1
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ec 0f       	add	r30, r28
 242:	fd 1f       	adc	r31, r29
 244:	e8 0f       	add	r30, r24
 246:	f1 1d       	adc	r31, r1
 248:	87 fd       	sbrc	r24, 7
 24a:	fa 95       	dec	r31
 24c:	90 81       	ld	r25, Z
 24e:	95 b9       	out	0x05, r25	; 5
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	9f ef       	ldi	r25, 0xFF	; 255
 254:	41 ee       	ldi	r20, 0xE1	; 225
 256:	54 e0       	ldi	r21, 0x04	; 4
 258:	91 50       	subi	r25, 0x01	; 1
 25a:	40 40       	sbci	r20, 0x00	; 0
 25c:	50 40       	sbci	r21, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x1c2>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x1cc>
 262:	00 00       	nop
				}
				_delay_ms(100);
			}
			break;
		case 4:
			while(cont != cont_4 && (PIND & (1<<0)))
 264:	38 17       	cp	r19, r24
 266:	21 f0       	breq	.+8      	; 0x270 <main+0x1da>
 268:	48 99       	sbic	0x09, 0	; 9
 26a:	e8 cf       	rjmp	.-48     	; 0x23c <main+0x1a6>
 26c:	01 c0       	rjmp	.+2      	; 0x270 <main+0x1da>
 26e:	83 2f       	mov	r24, r19
			{
				PORTB = LED[cont];
				cont++;
				_delay_ms(100);
			}
			cont_4--;
 270:	31 50       	subi	r19, 0x01	; 1
			if(cont_4 == 1)
 272:	31 30       	cpi	r19, 0x01	; 1
 274:	09 f4       	brne	.+2      	; 0x278 <main+0x1e2>
			{
				cont_4 = 8;
 276:	38 e0       	ldi	r19, 0x08	; 8
			}
			cont--;
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	08 f4       	brcc	.+2      	; 0x27e <main+0x1e8>
 27c:	31 cf       	rjmp	.-414    	; 0xe0 <main+0x4a>
			while(cont != -1 && (PIND & (1<<0)))
 27e:	48 9b       	sbis	0x09, 0	; 9
 280:	2f cf       	rjmp	.-418    	; 0xe0 <main+0x4a>
			{
				PORTB = LED[cont];
 282:	e1 e0       	ldi	r30, 0x01	; 1
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	ec 0f       	add	r30, r28
 288:	fd 1f       	adc	r31, r29
 28a:	e8 0f       	add	r30, r24
 28c:	f1 1d       	adc	r31, r1
 28e:	87 fd       	sbrc	r24, 7
 290:	fa 95       	dec	r31
 292:	90 81       	ld	r25, Z
 294:	95 b9       	out	0x05, r25	; 5
 296:	81 50       	subi	r24, 0x01	; 1
 298:	9f ef       	ldi	r25, 0xFF	; 255
 29a:	41 ee       	ldi	r20, 0xE1	; 225
 29c:	54 e0       	ldi	r21, 0x04	; 4
 29e:	91 50       	subi	r25, 0x01	; 1
 2a0:	40 40       	sbci	r20, 0x00	; 0
 2a2:	50 40       	sbci	r21, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <main+0x208>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x212>
 2a8:	00 00       	nop
			if(cont_4 == 1)
			{
				cont_4 = 8;
			}
			cont--;
			while(cont != -1 && (PIND & (1<<0)))
 2aa:	8f 3f       	cpi	r24, 0xFF	; 255
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <main+0x21a>
 2ae:	18 cf       	rjmp	.-464    	; 0xe0 <main+0x4a>
 2b0:	48 99       	sbic	0x09, 0	; 9
 2b2:	e7 cf       	rjmp	.-50     	; 0x282 <main+0x1ec>
 2b4:	15 cf       	rjmp	.-470    	; 0xe0 <main+0x4a>
				{
					PORTB = LED[cont];
					cont++;
					_delay_ms(100);
				}
				cont--;
 2b6:	87 e0       	ldi	r24, 0x07	; 7
 2b8:	8b cf       	rjmp	.-234    	; 0x1d0 <main+0x13a>
			break;
		case 3:
			cont = 0;
			while((PIND & (1<<0)))
			{
				PORTB = LED_3[cont];
 2ba:	89 85       	ldd	r24, Y+9	; 0x09
 2bc:	85 b9       	out	0x05, r24	; 5
				cont++;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	b1 cf       	rjmp	.-158    	; 0x224 <main+0x18e>

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
