
GPIO_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000462  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000785  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000681  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000477  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006cf9  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  0000851d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00008564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000289f  00000000  00000000  00008574  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 2f 02 	jmp	0x45e	; 0x45e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	6a 97       	sbiw	r28, 0x1a	; 26
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	DDRC  = 0b11111111; //Habilita os pinos PC0..6 como saídas
  aa:	87 e2       	ldi	r24, 0x27	; 39
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	DDRD  &= ~(1<<0);	//DDRD  &= 0b11111110; Habilita o pino PD0 como entrada
  b4:	8a e2       	ldi	r24, 0x2A	; 42
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2a e2       	ldi	r18, 0x2A	; 42
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	2e 7f       	andi	r18, 0xFE	; 254
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	PORTD |= (1<<0);	//PORTD |= 0b00000001; Habilita o resistor de pull-up do pino PD0
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2b e2       	ldi	r18, 0x2B	; 43
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	21 60       	ori	r18, 0x01	; 1
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18

	uint8_t num = 0, out = 0;
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t LUT[10] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B};
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	e0 e0       	ldi	r30, 0x00	; 0
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	de 01       	movw	r26, r28
  e4:	51 96       	adiw	r26, 0x11	; 17
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x50>
	//Program Memory Usage 	:	1134 bytes   3,5 % Full
	//Data Memory Usage 		:	10 bytes   0,5 % Full

	while (1)
	{      // 0bxxxxxxxx &  0b00000001 = 0b0000000x
		if (!(PIND & (1<<0))) //Retorna 1 se PD0 for 1 ... e 0 se PD0 for 0
  ee:	89 e2       	ldi	r24, 0x29	; 41
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	fc 01       	movw	r30, r24
  f4:	80 81       	ld	r24, Z
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	81 70       	andi	r24, 0x01	; 1
  fc:	99 27       	eor	r25, r25
  fe:	89 2b       	or	r24, r25
 100:	71 f4       	brne	.+28     	; 0x11e <main+0x88>
		{
			while(!(PIND & (1<<0)));//Trava o programa até que o botão seja liberado
 102:	00 00       	nop
 104:	89 e2       	ldi	r24, 0x29	; 41
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	80 81       	ld	r24, Z
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	81 70       	andi	r24, 0x01	; 1
 112:	99 27       	eor	r25, r25
 114:	89 2b       	or	r24, r25
 116:	b1 f3       	breq	.-20     	; 0x104 <main+0x6e>
			num++;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	89 83       	std	Y+1, r24	; 0x01
		}
		if (num==10)
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	8a 30       	cpi	r24, 0x0A	; 10
 122:	09 f4       	brne	.+2      	; 0x126 <main+0x90>
			num = 0;
 124:	19 82       	std	Y+1, r1	; 0x01
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	a8 ec       	ldi	r26, 0xC8	; 200
 12c:	b2 e4       	ldi	r27, 0x42	; 66
 12e:	8b 83       	std	Y+3, r24	; 0x03
 130:	9c 83       	std	Y+4, r25	; 0x04
 132:	ad 83       	std	Y+5, r26	; 0x05
 134:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	4a e7       	ldi	r20, 0x7A	; 122
 13c:	55 e4       	ldi	r21, 0x45	; 69
 13e:	6b 81       	ldd	r22, Y+3	; 0x03
 140:	7c 81       	ldd	r23, Y+4	; 0x04
 142:	8d 81       	ldd	r24, Y+5	; 0x05
 144:	9e 81       	ldd	r25, Y+6	; 0x06
 146:	0e 94 9a 01 	call	0x334	; 0x334 <__mulsf3>
 14a:	dc 01       	movw	r26, r24
 14c:	cb 01       	movw	r24, r22
 14e:	8f 83       	std	Y+7, r24	; 0x07
 150:	98 87       	std	Y+8, r25	; 0x08
 152:	a9 87       	std	Y+9, r26	; 0x09
 154:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	40 e8       	ldi	r20, 0x80	; 128
 15c:	5f e3       	ldi	r21, 0x3F	; 63
 15e:	6f 81       	ldd	r22, Y+7	; 0x07
 160:	78 85       	ldd	r23, Y+8	; 0x08
 162:	89 85       	ldd	r24, Y+9	; 0x09
 164:	9a 85       	ldd	r25, Y+10	; 0x0a
 166:	0e 94 14 01 	call	0x228	; 0x228 <__cmpsf2>
 16a:	88 23       	and	r24, r24
 16c:	2c f4       	brge	.+10     	; 0x178 <main+0xe2>
		__ticks = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	9c 87       	std	Y+12, r25	; 0x0c
 174:	8b 87       	std	Y+11, r24	; 0x0b
 176:	3f c0       	rjmp	.+126    	; 0x1f6 <main+0x160>
	else if (__tmp > 65535)
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	3f ef       	ldi	r19, 0xFF	; 255
 17c:	4f e7       	ldi	r20, 0x7F	; 127
 17e:	57 e4       	ldi	r21, 0x47	; 71
 180:	6f 81       	ldd	r22, Y+7	; 0x07
 182:	78 85       	ldd	r23, Y+8	; 0x08
 184:	89 85       	ldd	r24, Y+9	; 0x09
 186:	9a 85       	ldd	r25, Y+10	; 0x0a
 188:	0e 94 95 01 	call	0x32a	; 0x32a <__gesf2>
 18c:	18 16       	cp	r1, r24
 18e:	4c f5       	brge	.+82     	; 0x1e2 <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e2       	ldi	r20, 0x20	; 32
 196:	51 e4       	ldi	r21, 0x41	; 65
 198:	6b 81       	ldd	r22, Y+3	; 0x03
 19a:	7c 81       	ldd	r23, Y+4	; 0x04
 19c:	8d 81       	ldd	r24, Y+5	; 0x05
 19e:	9e 81       	ldd	r25, Y+6	; 0x06
 1a0:	0e 94 9a 01 	call	0x334	; 0x334 <__mulsf3>
 1a4:	dc 01       	movw	r26, r24
 1a6:	cb 01       	movw	r24, r22
 1a8:	bc 01       	movw	r22, r24
 1aa:	cd 01       	movw	r24, r26
 1ac:	0e 94 19 01 	call	0x232	; 0x232 <__fixunssfsi>
 1b0:	dc 01       	movw	r26, r24
 1b2:	cb 01       	movw	r24, r22
 1b4:	9c 87       	std	Y+12, r25	; 0x0c
 1b6:	8b 87       	std	Y+11, r24	; 0x0b
 1b8:	0f c0       	rjmp	.+30     	; 0x1d8 <main+0x142>
 1ba:	80 e9       	ldi	r24, 0x90	; 144
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	9e 87       	std	Y+14, r25	; 0x0e
 1c0:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c2:	8d 85       	ldd	r24, Y+13	; 0x0d
 1c4:	9e 85       	ldd	r25, Y+14	; 0x0e
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x130>
 1ca:	9e 87       	std	Y+14, r25	; 0x0e
 1cc:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ce:	8b 85       	ldd	r24, Y+11	; 0x0b
 1d0:	9c 85       	ldd	r25, Y+12	; 0x0c
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	9c 87       	std	Y+12, r25	; 0x0c
 1d6:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1da:	9c 85       	ldd	r25, Y+12	; 0x0c
 1dc:	89 2b       	or	r24, r25
 1de:	69 f7       	brne	.-38     	; 0x1ba <main+0x124>
 1e0:	14 c0       	rjmp	.+40     	; 0x20a <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1e2:	6f 81       	ldd	r22, Y+7	; 0x07
 1e4:	78 85       	ldd	r23, Y+8	; 0x08
 1e6:	89 85       	ldd	r24, Y+9	; 0x09
 1e8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ea:	0e 94 19 01 	call	0x232	; 0x232 <__fixunssfsi>
 1ee:	dc 01       	movw	r26, r24
 1f0:	cb 01       	movw	r24, r22
 1f2:	9c 87       	std	Y+12, r25	; 0x0c
 1f4:	8b 87       	std	Y+11, r24	; 0x0b
 1f6:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f8:	9c 85       	ldd	r25, Y+12	; 0x0c
 1fa:	98 8b       	std	Y+16, r25	; 0x10
 1fc:	8f 87       	std	Y+15, r24	; 0x0f
 1fe:	8f 85       	ldd	r24, Y+15	; 0x0f
 200:	98 89       	ldd	r25, Y+16	; 0x10
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0x16c>
 206:	98 8b       	std	Y+16, r25	; 0x10
 208:	8f 87       	std	Y+15, r24	; 0x0f
			out =  0x7B;
			break;
		}
		
		PORTC = out;*/
		PORTC = LUT[num];//out;
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	29 81       	ldd	r18, Y+1	; 0x01
 210:	22 2f       	mov	r18, r18
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	ae 01       	movw	r20, r28
 216:	4f 5e       	subi	r20, 0xEF	; 239
 218:	5f 4f       	sbci	r21, 0xFF	; 255
 21a:	24 0f       	add	r18, r20
 21c:	35 1f       	adc	r19, r21
 21e:	f9 01       	movw	r30, r18
 220:	20 81       	ld	r18, Z
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
		
		
	}
 226:	63 cf       	rjmp	.-314    	; 0xee <main+0x58>

00000228 <__cmpsf2>:
 228:	0e 94 48 01 	call	0x290	; 0x290 <__fp_cmp>
 22c:	08 f4       	brcc	.+2      	; 0x230 <__cmpsf2+0x8>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret

00000232 <__fixunssfsi>:
 232:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__fp_splitA>
 236:	88 f0       	brcs	.+34     	; 0x25a <__fixunssfsi+0x28>
 238:	9f 57       	subi	r25, 0x7F	; 127
 23a:	98 f0       	brcs	.+38     	; 0x262 <__fixunssfsi+0x30>
 23c:	b9 2f       	mov	r27, r25
 23e:	99 27       	eor	r25, r25
 240:	b7 51       	subi	r27, 0x17	; 23
 242:	b0 f0       	brcs	.+44     	; 0x270 <__fixunssfsi+0x3e>
 244:	e1 f0       	breq	.+56     	; 0x27e <__fixunssfsi+0x4c>
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	88 1f       	adc	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	1a f0       	brmi	.+6      	; 0x256 <__fixunssfsi+0x24>
 250:	ba 95       	dec	r27
 252:	c9 f7       	brne	.-14     	; 0x246 <__fixunssfsi+0x14>
 254:	14 c0       	rjmp	.+40     	; 0x27e <__fixunssfsi+0x4c>
 256:	b1 30       	cpi	r27, 0x01	; 1
 258:	91 f0       	breq	.+36     	; 0x27e <__fixunssfsi+0x4c>
 25a:	0e 94 8e 01 	call	0x31c	; 0x31c <__fp_zero>
 25e:	b1 e0       	ldi	r27, 0x01	; 1
 260:	08 95       	ret
 262:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__fp_zero>
 266:	67 2f       	mov	r22, r23
 268:	78 2f       	mov	r23, r24
 26a:	88 27       	eor	r24, r24
 26c:	b8 5f       	subi	r27, 0xF8	; 248
 26e:	39 f0       	breq	.+14     	; 0x27e <__fixunssfsi+0x4c>
 270:	b9 3f       	cpi	r27, 0xF9	; 249
 272:	cc f3       	brlt	.-14     	; 0x266 <__fixunssfsi+0x34>
 274:	86 95       	lsr	r24
 276:	77 95       	ror	r23
 278:	67 95       	ror	r22
 27a:	b3 95       	inc	r27
 27c:	d9 f7       	brne	.-10     	; 0x274 <__fixunssfsi+0x42>
 27e:	3e f4       	brtc	.+14     	; 0x28e <__fixunssfsi+0x5c>
 280:	90 95       	com	r25
 282:	80 95       	com	r24
 284:	70 95       	com	r23
 286:	61 95       	neg	r22
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	8f 4f       	sbci	r24, 0xFF	; 255
 28c:	9f 4f       	sbci	r25, 0xFF	; 255
 28e:	08 95       	ret

00000290 <__fp_cmp>:
 290:	99 0f       	add	r25, r25
 292:	00 08       	sbc	r0, r0
 294:	55 0f       	add	r21, r21
 296:	aa 0b       	sbc	r26, r26
 298:	e0 e8       	ldi	r30, 0x80	; 128
 29a:	fe ef       	ldi	r31, 0xFE	; 254
 29c:	16 16       	cp	r1, r22
 29e:	17 06       	cpc	r1, r23
 2a0:	e8 07       	cpc	r30, r24
 2a2:	f9 07       	cpc	r31, r25
 2a4:	c0 f0       	brcs	.+48     	; 0x2d6 <__fp_cmp+0x46>
 2a6:	12 16       	cp	r1, r18
 2a8:	13 06       	cpc	r1, r19
 2aa:	e4 07       	cpc	r30, r20
 2ac:	f5 07       	cpc	r31, r21
 2ae:	98 f0       	brcs	.+38     	; 0x2d6 <__fp_cmp+0x46>
 2b0:	62 1b       	sub	r22, r18
 2b2:	73 0b       	sbc	r23, r19
 2b4:	84 0b       	sbc	r24, r20
 2b6:	95 0b       	sbc	r25, r21
 2b8:	39 f4       	brne	.+14     	; 0x2c8 <__fp_cmp+0x38>
 2ba:	0a 26       	eor	r0, r26
 2bc:	61 f0       	breq	.+24     	; 0x2d6 <__fp_cmp+0x46>
 2be:	23 2b       	or	r18, r19
 2c0:	24 2b       	or	r18, r20
 2c2:	25 2b       	or	r18, r21
 2c4:	21 f4       	brne	.+8      	; 0x2ce <__fp_cmp+0x3e>
 2c6:	08 95       	ret
 2c8:	0a 26       	eor	r0, r26
 2ca:	09 f4       	brne	.+2      	; 0x2ce <__fp_cmp+0x3e>
 2cc:	a1 40       	sbci	r26, 0x01	; 1
 2ce:	a6 95       	lsr	r26
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	81 1d       	adc	r24, r1
 2d4:	81 1d       	adc	r24, r1
 2d6:	08 95       	ret

000002d8 <__fp_split3>:
 2d8:	57 fd       	sbrc	r21, 7
 2da:	90 58       	subi	r25, 0x80	; 128
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	59 f0       	breq	.+22     	; 0x2f8 <__fp_splitA+0x10>
 2e2:	5f 3f       	cpi	r21, 0xFF	; 255
 2e4:	71 f0       	breq	.+28     	; 0x302 <__fp_splitA+0x1a>
 2e6:	47 95       	ror	r20

000002e8 <__fp_splitA>:
 2e8:	88 0f       	add	r24, r24
 2ea:	97 fb       	bst	r25, 7
 2ec:	99 1f       	adc	r25, r25
 2ee:	61 f0       	breq	.+24     	; 0x308 <__fp_splitA+0x20>
 2f0:	9f 3f       	cpi	r25, 0xFF	; 255
 2f2:	79 f0       	breq	.+30     	; 0x312 <__fp_splitA+0x2a>
 2f4:	87 95       	ror	r24
 2f6:	08 95       	ret
 2f8:	12 16       	cp	r1, r18
 2fa:	13 06       	cpc	r1, r19
 2fc:	14 06       	cpc	r1, r20
 2fe:	55 1f       	adc	r21, r21
 300:	f2 cf       	rjmp	.-28     	; 0x2e6 <__fp_split3+0xe>
 302:	46 95       	lsr	r20
 304:	f1 df       	rcall	.-30     	; 0x2e8 <__fp_splitA>
 306:	08 c0       	rjmp	.+16     	; 0x318 <__fp_splitA+0x30>
 308:	16 16       	cp	r1, r22
 30a:	17 06       	cpc	r1, r23
 30c:	18 06       	cpc	r1, r24
 30e:	99 1f       	adc	r25, r25
 310:	f1 cf       	rjmp	.-30     	; 0x2f4 <__fp_splitA+0xc>
 312:	86 95       	lsr	r24
 314:	71 05       	cpc	r23, r1
 316:	61 05       	cpc	r22, r1
 318:	08 94       	sec
 31a:	08 95       	ret

0000031c <__fp_zero>:
 31c:	e8 94       	clt

0000031e <__fp_szero>:
 31e:	bb 27       	eor	r27, r27
 320:	66 27       	eor	r22, r22
 322:	77 27       	eor	r23, r23
 324:	cb 01       	movw	r24, r22
 326:	97 f9       	bld	r25, 7
 328:	08 95       	ret

0000032a <__gesf2>:
 32a:	0e 94 48 01 	call	0x290	; 0x290 <__fp_cmp>
 32e:	08 f4       	brcc	.+2      	; 0x332 <__gesf2+0x8>
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	08 95       	ret

00000334 <__mulsf3>:
 334:	0e 94 ad 01 	call	0x35a	; 0x35a <__mulsf3x>
 338:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__fp_round>
 33c:	0e 94 10 02 	call	0x420	; 0x420 <__fp_pscA>
 340:	38 f0       	brcs	.+14     	; 0x350 <__mulsf3+0x1c>
 342:	0e 94 17 02 	call	0x42e	; 0x42e <__fp_pscB>
 346:	20 f0       	brcs	.+8      	; 0x350 <__mulsf3+0x1c>
 348:	95 23       	and	r25, r21
 34a:	11 f0       	breq	.+4      	; 0x350 <__mulsf3+0x1c>
 34c:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_inf>
 350:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__fp_nan>
 354:	11 24       	eor	r1, r1
 356:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__fp_szero>

0000035a <__mulsf3x>:
 35a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__fp_split3>
 35e:	70 f3       	brcs	.-36     	; 0x33c <__mulsf3+0x8>

00000360 <__mulsf3_pse>:
 360:	95 9f       	mul	r25, r21
 362:	c1 f3       	breq	.-16     	; 0x354 <__mulsf3+0x20>
 364:	95 0f       	add	r25, r21
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	55 1f       	adc	r21, r21
 36a:	62 9f       	mul	r22, r18
 36c:	f0 01       	movw	r30, r0
 36e:	72 9f       	mul	r23, r18
 370:	bb 27       	eor	r27, r27
 372:	f0 0d       	add	r31, r0
 374:	b1 1d       	adc	r27, r1
 376:	63 9f       	mul	r22, r19
 378:	aa 27       	eor	r26, r26
 37a:	f0 0d       	add	r31, r0
 37c:	b1 1d       	adc	r27, r1
 37e:	aa 1f       	adc	r26, r26
 380:	64 9f       	mul	r22, r20
 382:	66 27       	eor	r22, r22
 384:	b0 0d       	add	r27, r0
 386:	a1 1d       	adc	r26, r1
 388:	66 1f       	adc	r22, r22
 38a:	82 9f       	mul	r24, r18
 38c:	22 27       	eor	r18, r18
 38e:	b0 0d       	add	r27, r0
 390:	a1 1d       	adc	r26, r1
 392:	62 1f       	adc	r22, r18
 394:	73 9f       	mul	r23, r19
 396:	b0 0d       	add	r27, r0
 398:	a1 1d       	adc	r26, r1
 39a:	62 1f       	adc	r22, r18
 39c:	83 9f       	mul	r24, r19
 39e:	a0 0d       	add	r26, r0
 3a0:	61 1d       	adc	r22, r1
 3a2:	22 1f       	adc	r18, r18
 3a4:	74 9f       	mul	r23, r20
 3a6:	33 27       	eor	r19, r19
 3a8:	a0 0d       	add	r26, r0
 3aa:	61 1d       	adc	r22, r1
 3ac:	23 1f       	adc	r18, r19
 3ae:	84 9f       	mul	r24, r20
 3b0:	60 0d       	add	r22, r0
 3b2:	21 1d       	adc	r18, r1
 3b4:	82 2f       	mov	r24, r18
 3b6:	76 2f       	mov	r23, r22
 3b8:	6a 2f       	mov	r22, r26
 3ba:	11 24       	eor	r1, r1
 3bc:	9f 57       	subi	r25, 0x7F	; 127
 3be:	50 40       	sbci	r21, 0x00	; 0
 3c0:	9a f0       	brmi	.+38     	; 0x3e8 <__mulsf3_pse+0x88>
 3c2:	f1 f0       	breq	.+60     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3c4:	88 23       	and	r24, r24
 3c6:	4a f0       	brmi	.+18     	; 0x3da <__mulsf3_pse+0x7a>
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	bb 1f       	adc	r27, r27
 3ce:	66 1f       	adc	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	88 1f       	adc	r24, r24
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	50 40       	sbci	r21, 0x00	; 0
 3d8:	a9 f7       	brne	.-22     	; 0x3c4 <__mulsf3_pse+0x64>
 3da:	9e 3f       	cpi	r25, 0xFE	; 254
 3dc:	51 05       	cpc	r21, r1
 3de:	80 f0       	brcs	.+32     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e0:	0c 94 07 02 	jmp	0x40e	; 0x40e <__fp_inf>
 3e4:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__fp_szero>
 3e8:	5f 3f       	cpi	r21, 0xFF	; 255
 3ea:	e4 f3       	brlt	.-8      	; 0x3e4 <__mulsf3_pse+0x84>
 3ec:	98 3e       	cpi	r25, 0xE8	; 232
 3ee:	d4 f3       	brlt	.-12     	; 0x3e4 <__mulsf3_pse+0x84>
 3f0:	86 95       	lsr	r24
 3f2:	77 95       	ror	r23
 3f4:	67 95       	ror	r22
 3f6:	b7 95       	ror	r27
 3f8:	f7 95       	ror	r31
 3fa:	e7 95       	ror	r30
 3fc:	9f 5f       	subi	r25, 0xFF	; 255
 3fe:	c1 f7       	brne	.-16     	; 0x3f0 <__mulsf3_pse+0x90>
 400:	fe 2b       	or	r31, r30
 402:	88 0f       	add	r24, r24
 404:	91 1d       	adc	r25, r1
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	97 f9       	bld	r25, 7
 40c:	08 95       	ret

0000040e <__fp_inf>:
 40e:	97 f9       	bld	r25, 7
 410:	9f 67       	ori	r25, 0x7F	; 127
 412:	80 e8       	ldi	r24, 0x80	; 128
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	08 95       	ret

0000041a <__fp_nan>:
 41a:	9f ef       	ldi	r25, 0xFF	; 255
 41c:	80 ec       	ldi	r24, 0xC0	; 192
 41e:	08 95       	ret

00000420 <__fp_pscA>:
 420:	00 24       	eor	r0, r0
 422:	0a 94       	dec	r0
 424:	16 16       	cp	r1, r22
 426:	17 06       	cpc	r1, r23
 428:	18 06       	cpc	r1, r24
 42a:	09 06       	cpc	r0, r25
 42c:	08 95       	ret

0000042e <__fp_pscB>:
 42e:	00 24       	eor	r0, r0
 430:	0a 94       	dec	r0
 432:	12 16       	cp	r1, r18
 434:	13 06       	cpc	r1, r19
 436:	14 06       	cpc	r1, r20
 438:	05 06       	cpc	r0, r21
 43a:	08 95       	ret

0000043c <__fp_round>:
 43c:	09 2e       	mov	r0, r25
 43e:	03 94       	inc	r0
 440:	00 0c       	add	r0, r0
 442:	11 f4       	brne	.+4      	; 0x448 <__fp_round+0xc>
 444:	88 23       	and	r24, r24
 446:	52 f0       	brmi	.+20     	; 0x45c <__fp_round+0x20>
 448:	bb 0f       	add	r27, r27
 44a:	40 f4       	brcc	.+16     	; 0x45c <__fp_round+0x20>
 44c:	bf 2b       	or	r27, r31
 44e:	11 f4       	brne	.+4      	; 0x454 <__fp_round+0x18>
 450:	60 ff       	sbrs	r22, 0
 452:	04 c0       	rjmp	.+8      	; 0x45c <__fp_round+0x20>
 454:	6f 5f       	subi	r22, 0xFF	; 255
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
